# This program may be used, executed, copied, modified and distributed
# without royalty for the purpose of developing, using, marketing, or distribution

#---------------------------------------------------
# LTPA_LDAPSecurity procs
#---------------------------------------------------
# This script is used to turn on LTPA/LDAP Security 


#-------------------------------------------------------------------------------
# initialize ldap server required attributes and values
#-------------------------------------------------------------------------------
set ldapServer null
set ldapServerId null
set ldapPassword null
set ldapPort null
set domainHostname null

#-------------------------------------------------------------------------------
# variables to save the return values
#-------------------------------------------------------------------------------
set securityId null
set ltpaId null
set ldapUserRegistryId null
set secMbean null
set privateKey null
set publicKey null
set sharedKey null
# password for LTPA can be anything but you need to use the same password when you generateKeys and when you set the ltpa password
set ltpaPasw boo

#-------------------------------------------------------------------------------
# get Security id
#-------------------------------------------------------------------------------
proc getSecId {} {
	global AdminConfig securityId
	if {[catch {$AdminConfig list Security} result]} {
		puts stdout "\$AdminConfig list Security caught an exception $result\n"
		return 
	} else {
		if {$result != {}} {
			# incase more than one, just get the first one
			set securityId [lindex $result 0]
			puts stdout "Got Security ConfigId is $securityId\n"
		} else {
			puts stdout "Security ConfigId was not found\n"
		}
	}
}


#-------------------------------------------------------------------------------
# get LTPA config id
#-------------------------------------------------------------------------------
proc getLTPAId {} {
	global AdminConfig ltpaId
	if {[catch {$AdminConfig list LTPA} result]} {
		puts stdout "\$AdminConfig list LTPA caught an exception $result\n"
		return 
	} else {
		if {$result != {}} {
			# incase more than one, just get the first one
			set ltpaId [lindex $result 0]
			puts stdout "Got LTPA ConfigId is $ltpaId\n"
		} else {
			puts stdout "LTPA ConfigId was not found\n"
		}
	}
}

#-------------------------------------------------------------------------------
# get LDAPUserRegistry id
#-------------------------------------------------------------------------------
proc getLDAPUserRegistryId {} {
	global AdminConfig ldapUserRegistryId
	if {[catch {$AdminConfig list LDAPUserRegistry} result]} {
		puts stdout "\$AdminConfig list LDAPUserRegistry caught an exception $result\n"
		return 
	} else {
		if {$result != {}} {
			# incase more than one, just get the first one
			set ldapUserRegistryId [lindex $result 0]
			puts stdout "Got LDAPUserRegistry ConfigId is $ldapUserRegistryId\n"
		} else {
			puts stdout "LDAPUserRegistry ConfigId was not found\n"
		}
	}
}

#-------------------------------------------------------------------------------
# get the SecurityAdmin mbean
#-------------------------------------------------------------------------------
proc getSecurityAdminMbean {} {
	global AdminControl secMbean
	if {[catch {$AdminControl queryNames WebSphere:type=SecurityAdmin,*} result]} {
		puts stdout "\$AdminControl queryNames WebSphere:type=SecurityAdmin,* caught an exception $result\n"
		return 
	} else {
		if {$result != {}} {
			# incase more than one, just get the first one
			set secMbean [lindex $result 0]
			puts stdout "Got Security mbean is $secMbean\n"
		} else {
			puts stdout "Security Mbean was not found\n"
		}
	}
}

#-------------------------------------------------------------------------------
# generate LTPA keys
#-------------------------------------------------------------------------------
proc generateLTPAKeys {} {
	global AdminControl secMbean ltpaPasw
	if {$secMbean != {} || $secMbean != "null"} {
		if {[catch {$AdminControl invoke $secMbean generateKeys $ltpaPasw} result]} {
			puts stdout "\$AdminControl invoke $secMbean generateKeys $ltpaPasw caught an exception $result\n"
			return 
		} else {
			puts stdout "LTPA keys was generated\n"
		}
	}
}

#-------------------------------------------------------------------------------
# exportLTPAKeys to get the key value to set private, public and shared key
#-------------------------------------------------------------------------------
proc exportLTPAKey {} {
	global AdminControl secMbean privateKey publicKey sharedKey 
	if {$secMbean != {} || $secMbean != "null"} {
		if {[catch {$AdminControl invoke $secMbean exportLTPAKeys} result]} {
			puts stdout "\$AdminControl invoke $secMbean exportLTPAKeys caught an exception $result\n"
			return 
		} else {
			if {$result != {}} {
				# get shared key value
				set sharedKey [lindex [lindex $result 1] 1]
				# get private key value
				set privateKey [lindex [lindex $result 4] 1]
				# get public key value
				set publicKey [lindex [lindex $result 6] 1]
				#puts stdout "ExportLTPAKeys return"
				#puts stdout "$result\n"
				#puts stdout "Got the shared key is $sharedKey\n"
				#puts stdout "Got the private key is $privateKey\n"
				#puts stdout "Got the public key is $publicKey\n"
				puts stdout "public, private, and shared keys exported\n"
			} else {
				puts stdout "ExportLTPAKeys return empty string\n"
			}
		}
	}
}

#-------------------------------------------------------------------------------
# setup attribute values for AuthenticationMechanism using LTPA ConfigId
#-------------------------------------------------------------------------------
proc doAuthenticationMechanism {} {
	global AdminConfig domainHostname ltpaId ltpaPasw privateKey publicKey sharedKey
	set Attrs1 [list [list password $ltpaPasw] [list singleSignon [list [list domainName $domainHostname] [list enabled true]]] [list private [list [list byteArray $privateKey]]] [list public [list [list byteArray $publicKey]]] [list shared [list [list byteArray $sharedKey]]]] 
	if {$ltpaId != "null" || $ltpaId != {}} {
		if {[catch {$AdminConfig modify $ltpaId $Attrs1} result]} {
			puts stdout "\$AdminConfig modify $ltpaId $Attrs1 caught an exception $result\n"
			return
		} else {
			# save the update
			if {[catch {$AdminConfig save} saveResult]} {
				puts stdout "\$AdminConfig save caught an exception $saveResult\n"
			} else {
				puts stdout "Done setting up attributes values for AuthenticationMechanism"
				#puts stdout "Attributes values being set up is $Attrs1"
				puts stdout "Updated was saved successfully\n"
			}
		}
	} else {
		puts stdout "LTPA ConfigId was not found\n"
	}
}


#-------------------------------------------------------------------------------
# setup attribute values for LDAPUserRegistry using LDAPUserRegistry ConfigId
#-------------------------------------------------------------------------------
proc doLDAPUserRegistry {} {
	global AdminConfig ldapServer ldapServerId ldapPassword ldapPort domainHostname ldapUserRegistryId
	set Attrs2 [list [list serverId $ldapServerId] [list serverPassword $ldapPassword] [list realm $ldapServer:$ldapPort] [list baseDN o=$domainHostname] [list reuseConnection true] [list hosts [list [list [list host $ldapServer] [list port $ldapPort]]]]]
	if {$ldapUserRegistryId != "null" || $ldapUserRegistryId != {}} {
		# do this first to make sure not other host or port in security.xml
		# otherwise it will failed to start the server after security on
		set temp [catch {$AdminConfig showAttribute $ldapUserRegistryId hosts} hostIdList]
		if {$hostIdList != {}} {
			foreach hostId $hostIdList {
				set temp [catch {$AdminConfig remove $hostId} result]
				puts stdout "Removed hostId $hostId\n"
				set temp [catch {$AdminConfig save} saveResult]
				puts stdout "Saved the change\n"
			}
		}
		if {[catch {$AdminConfig modify $ldapUserRegistryId $Attrs2} result]} {
			puts stdout "\$AdminConfig modify $ldapUserRegistryId $Attrs2 caught an exception $result\n"
			return
		} else {
			# save the update
			if {[catch {$AdminConfig save} saveResult]} {
				puts stdout "\$AdminConfig save caught an exception $saveResult\n"
			} else {
				puts stdout "Done setting up attributes values for LDAP User Registry"
				#puts stdout "Attributes values being set up is $Attrs2"
				puts stdout "Updated was saved successfully\n"
			}
		}
	} else {
		puts stdout "LDAPUserRegistry ConfigId was not found\n"
	}
}

#-------------------------------------------------------------------------------
# setup attribute values to enable wecurity using Security ConfigId
#-------------------------------------------------------------------------------
proc doGlobalSecurity {} {
	global AdminConfig securityId ltpaId ldapUserRegistryId
	set Attrs3 [list [list activeAuthMechanism $ltpaId] [list activeUserRegistry $ldapUserRegistryId] [list enabled true]]
	if {$securityId != "null" || $securityId != {} || $ltpaId != "null" || $ltpaId != {} || $ldapUserRegistryId != "null" || $ldapUserRegistryId != {}} {
		if {[catch {$AdminConfig modify $securityId $Attrs3} result]} {
			puts stdout "\$AdminConfig modify $securityId $Attrs3 caught an exception $result\n"
			return
		} else {
			# save the update
			if {[catch {$AdminConfig save} saveResult]} {
				puts stdout "\$AdminConfig save caught an exception $saveResult\n"
			} else {
				puts stdout "Done setting up attributes values for Global Security done"
				#puts stdout "Attributes values being set up is $Attrs3"
				puts stdout "Updated was saved successfully\n"
			}
		}
	} else {
		puts stdout "Any of the Security, LTPA or LDAPUserRegistry ConfigId was not found\n"
	}
}

#-------------------------------------------------------------------------------
# setup attribute values to disable wecurity using Security ConfigId
#-------------------------------------------------------------------------------
proc doGlobalSecurityDisable {} {
	global AdminConfig securityId
	set Attrs4 [list [list enabled false]]
	if {$securityId != "null" || $securityId != {}} {
		if {[catch {$AdminConfig modify $securityId $Attrs4} result]} {
			puts stdout "\$AdminConfig modify $securityId $Attrs4 caught an exception $result\n"
			return
		} else {
			# save the update
			if {[catch {$AdminConfig save} saveResult]} {
				puts stdout "\$AdminConfig save caught an exception $saveResult\n"
			} else {
				puts stdout "Done setting up attributes values for Global Security"
				#puts stdout "Attributes values being set up is $Attrs4"
				puts stdout "Updated was saved successfully\n"
			}
		}
	} else {
		puts stdout "Any of the Security ConfigId was not found\n"
	}
}

#-------------------------------------------------------------------------------
# force to do the sync here and put in wait to give time for sync to finish
#-------------------------------------------------------------------------------
proc forceSync {} {
	global AdminControl 
	if {[catch {$AdminControl queryNames type=NodeSync,*} result]} {
		puts stdout "\$AdminControl queryNames type=NodeSync,* caught an exception $result"
	} else {
		if {$result != {}} {
			foreach nsync $result {
				set syncResult false
				while {$syncResult != "true"} {
					puts stdout "Force NodeSync on $nsync"
					if {[catch {$AdminControl invoke $nsync sync ""} syncResult]} {
						puts stdout "\$AdminControl invoke $nsync sync \"\" caught an exception $syncResult"
						return
					} else {
						puts stdout "Sync Result on $nsync is $syncResult"
					}
				}
			}
			# wait for 1 minutes to make sure sync done
			puts stdout "Time out for 1 minute to make sure sync is done"
			after 60000 
		}
	}
}


#-----------------------------------------------------------------------
#
# LTPA_LDAPSecurityon -- this takes the LDAP server, user, password, 
#               port, and domain as argumnets to setup and turn on LTPA 
#               and LDAP security.
#
#-----------------------------------------------------------------------
proc LTPA_LDAPSecurityOn {args} {
	global ldapServer ldapServerId ldapPassword ldapPort domainHostname
	if {[regexp help [lindex $args 0]]} {
		puts "Syntax: LTPA_LDAPSecurityOn server user password port domain"
		return
	}
	if {[llength $args] != 5} {
		puts "Syntax: LTPA_LDAPSecurityOn server user password port domain"
		return
	}

	# setup server, user, password, port, and domain
	set ldapServer [lindex $args 0]
	set ldapServerId [lindex $args 1]
	set ldapPassword [lindex $args 2]
	set ldapPort [lindex $args 3]
	set domainHostname [lindex $args 4]

	getSecId
	getLTPAId
	getLDAPUserRegistryId
	getSecurityAdminMbean
	generateLTPAKeys
	exportLTPAKey
	doAuthenticationMechanism
	doLDAPUserRegistry 
	doGlobalSecurity
	forceSync

	puts stdout "\n\nPLEASE READ BELOW:"
	puts stdout "Done with LTPA/LDAP security turning on process, now you need to restart all the processes to make it affected. Then you can start using the client with SOAP or RMI connector.\n"
	puts stdout "If you are using SOAP Connector to connect to the server, you need to modify soap.client.props file in your <install_root>/properties directory.\n"
	puts stdout "Update as below for SOAP connector:"
	puts stdout "com.ibm.SOAP.securityEnabled=true"
	puts stdout "com.ibm.SOAP.loginUserid=$ldapServerId"
	puts stdout "com.ibm.SOAP.loginPassword=$ldapPassword\n\n"
	puts stdout "If you are using RMI Connector to connect to the server, you will be prompted to enter the \"userid\" and the \"password\". If you want to by pass the login process, you can modify sas.client.props file in your <install_root>/properties directory.\n"
	puts stdout "Update as below for RMI connector:"
	puts stdout "com.ibm.CORBA.loginSource=properties"
	puts stdout "com.ibm.CORBA.loginUserid=$ldapServerId"
	puts stdout "com.ibm.CORBA.loginPassword=$ldapPassword\n\n"
}

#-----------------------------------------------------------------------
#
# LTPA_LDAPSecurityOff -- this disables the LTPA/LDAP security.
#
#-----------------------------------------------------------------------
proc LTPA_LDAPSecurityOff {} {
	getSecId
	doGlobalSecurityDisable
	forceSync

	puts stdout "LTPA/LDAP security is off now but you need to restarted all the processes to make it affected.\n"
}
