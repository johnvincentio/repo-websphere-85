
#--------------------------------------------------------------------
# Set global constants
#--------------------------------------------------------------------

set M_TRACE_ENABLED false;
set M_SERVER "";
set M_NODE "";
set M_CELL "";

set M_OK 1;
set M_ERROR 0;

#--------------------------------------------------------------------
# Get global constants
#--------------------------------------------------------------------

proc JVget_server {} {global M_SERVER;  return $M_SERVER;}
proc JVget_node {} {global M_NODE; return $M_NODE;}
proc JVget_cell {} {global M_CELL; return $M_CELL;}

#--------------------------------------------------------------------
# Handle server tracing
#--------------------------------------------------------------------

proc JVtrace_on {} {
	global AdminControl M_SERVER M_NODE M_OK M_ERROR;
	JVputTrace ">>> Trace_On; Node=$M_NODE Server=$M_SERVER";
	if {[catch {$AdminControl queryNames type=TraceService,node=$M_NODE,process=$M_SERVER,*} myval1]} {
		JVputError "Cannot get TraceService; $myval1";
		return $M_ERROR;
	}
#	JVputTrace "result $myval1";
	if {$myval1 == ""} {
		JVputError "Request to get TraceService returned no results";
		return $M_ERROR;
	}
#	JVputTrace "got TraceService";
	if {[catch {$AdminControl setAttribute $myval1 traceSpecification com.ibm.*=all=enabled} myval2]} {
		JVputError "Cannot set attribute; $myval2";
		return $M_ERROR;
	}
	JVputTrace "<<< Trace_On";
	return $M_OK;
} 

proc JVtrace_off {} {
	global AdminControl M_SERVER M_NODE M_OK M_ERROR;
	JVputTrace ">>> Trace_Off; Node=$M_NODE Server=$M_SERVER";
	if {[catch {$AdminControl queryNames type=TraceService,node=$M_NODE,process=$M_SERVER,*} myval1]} {
		JVputError "Cannot get TraceService; $myval1";
		return $M_ERROR;
	}
#	JVputTrace "result $myval1";
	if {$myval1 == ""} {
		JVputError "Request to get TraceService returned no results";
		return $M_ERROR;
	}
#	JVputTrace "got TraceService";
	if {[catch {$AdminControl setAttribute $myval1 traceSpecification com.ibm.*=all=disabled} myval2]} {
		JVputError "Cannot set attribute; $myval2";
		return $M_ERROR;
	}
	JVputTrace "<<< Trace_Off";
	return $M_OK;
} 

proc JVdump_threads {} {
	global AdminControl M_SERVER M_NODE M_OK M_ERROR;
	JVputTrace ">>> Dump_Threads; Node=$M_NODE Server=$M_SERVER";
	if {[catch {$AdminControl queryNames type=JVM,node=$M_NODE,process=$M_SERVER,*} myval1]} {
		JVputError "Cannot get JVM; $myval1";
		return $M_ERROR;
	}
#	JVputTrace "result $myval1";
	if {$myval1 == ""} {
		JVputError "Request to get JVM returned no results";
		return $M_ERROR;
	}
#	JVputTrace "got TraceService";
	if {[catch {$AdminControl invoke $myval1 dumpThreads} myval2]} {
		JVputError "Cannot set attribute; $myval2";
		return $M_ERROR;
	}
	JVputTrace "<<< Dump_Threads";
	return $M_OK;
} 

#--------------------------------------------------------------------
# Processes the script arguments.
# The arguments are validated, and the global variables are set
# based on their values.
#
# Params:
#      argc           The number of arguments passed to the script.
#      argv           The arguments passed to the script.
#--------------------------------------------------------------------

proc JVprocessArguments {argc argv} {
	global AdminConfig M_NODE M_CELL M_SERVER VALID_OPTIONS M_OK M_ERROR;

	JVputTrace ">>> processArguments; $argc $argv";
	set VALID_OPTIONS   [list -cell -node -server -man];

	for {set i 0} {$i < $argc} {incr i} {
		if {[lsearch $VALID_OPTIONS [lindex $argv $i]] == -1} {
			JVusageError "[lindex $argv $i] is not a valid option.  Valid options are: $VALID_OPTIONS.";
			return $M_ERROR;
		}
		if {[lindex $argv $i] == "-cell"} {
			incr i;
			if { ([lsearch $VALID_OPTIONS [lindex $argv $i]] == -1) && ($i != $argc) } {
				set M_CELL [lindex $argv $i];
			} else {
				JVusageError "The cell name is not specified.";
				return $M_ERROR;
			}
		}
		if {[lindex $argv $i] == "-node"} {
			incr i;
			if { ([lsearch $VALID_OPTIONS [lindex $argv $i]] == -1) && ($i != $argc) } {
				set M_NODE [lindex $argv $i];
			} else {
				JVusageError "The node name is not specified.";
				return $M_ERROR;
			}
		}
		if {[lindex $argv $i] == "-server"} {
			incr i;
			if { ([lsearch $VALID_OPTIONS [lindex $argv $i]] == -1) && ($i != $argc) } {
				set M_SERVER [lindex $argv $i];
			} else {
				JVusageError "The server name is not specified.";
				return $M_ERROR;
			}
		}
		if {[lindex $argv $i] == "-man"} {
			displayHelpMessage;
			return $M_ERROR;
		}
	}
	JVputTrace "Check cell name $M_CELL";
	if {$M_CELL == ""} {
		set cells [$AdminConfig list Cell]
		if { [llength $cells] == 1 } {
			set M_CELL [$AdminConfig showAttribute $cells name];
		} elseif { [llength $cells] == 0 } {
			JVusageError "The configuration has no cells.";
			return $M_ERROR;
		} else {
			JVusageError "The configuration has more than one cell.  Use the -cell option to specify a cell.";
			return $M_ERROR;
		}
	} elseif { [llength [$AdminConfig getid /Cell:$M_CELL]] == 0 } {
		JVusageError "$M_CELL is not a valid cell name.";
		return $M_ERROR;
	}

	JVputTrace "Check node name $M_NODE";
	if {$M_NODE == ""} {
		set nodes [$AdminConfig getid /Cell:$M_CELL/Node:/];
		if { [llength $nodes] == 1 } {
			set M_NODE [$AdminConfig showAttribute $nodes name];
		} elseif { [llength $nodes] == 0 } {
			JVusageError "The $M_CELL cell has no nodes.";
			return $M_ERROR;
		} else {
			JVusageError "The configuration has more than one node.  Use the -node option to specify a node.";
			return $M_ERROR;
		}
	} elseif { [llength [$AdminConfig getid /Cell:$M_CELL/Node:$M_NODE]] == 0} {
		JVusageError "$M_NODE is not a valid node name.";
		return $M_ERROR;
	}

  	JVputTrace "Check node name $M_SERVER";
	if {$M_SERVER == ""} {
		set M_SERVER "server1";
	}
	if { [llength [$AdminConfig getid /Cell:$M_CELL/Node:$M_NODE/Server:$M_SERVER]] == 0 } {
		JVusageError "$M_SERVER is not a valid server name.";
		return $M_ERROR;
	}
	JVputTrace "<<< processArguments";
	return $M_OK;
}

#--------------------------------------------------------------------
# handle messages
#--------------------------------------------------------------------
proc JVformatError {msg} {return "ERROR: $msg";}
proc JVputError {msg} {puts [JVformatError $msg];}
proc JVputInfo {msg} {puts "INFO: $msg";}
proc JVputTrace {msg} {
	global M_TRACE_ENABLED;
	if {$M_TRACE_ENABLED} {puts "TRACE: $msg";}
}
proc JVthrow {msg} {return -code error [JVformatError $msg];}
proc JVusageError {errorMessage} {
	puts "";
	JVputError "Incorrect usage: $errorMessage";
	JVdisplayHelpMessage;
}
proc JVdisplayHelpMessage {} {
  puts " ";
  puts "#---------------------------HELP-----------------------------------";
  puts " ";
  puts "  OPTIONAL PARAMETERS";
  puts " ";
  puts "  -cell        Specifies the cell name of your server.";
  puts " ";
  puts "  -node        Specifies the node name of your server.";
  puts " ";
  puts "  -server      Specifies the server name. The default is server1.";
  puts " ";
  puts "  -man         Brings up this help dialog";
  puts " ";
  puts "#------------------------------------------------------------------";
}

#-----------------------------------------------------------------
# handle script tracing
#-----------------------------------------------------------------

proc JVscript_trace_enable {} {global M_TRACE_ENABLED; set M_TRACE_ENABLED true;}
proc JVscript_trace_disable {} {global M_TRACE_ENABLED; set M_TRACE_ENABLED false;}

#-----------------------------------------------------------------
# various useful procedures
#-----------------------------------------------------------------

proc JVshowServer {} {
	global M_SERVER M_NODE M_CELL;
	JVputInfo "---------------------------------------------------------------";
	JVputInfo " ";
	JVputInfo " Scope:                                                        ";
	JVputInfo "    cell                $M_CELL                                ";
	JVputInfo "    node                $M_NODE                                ";
	JVputInfo "    server              $M_SERVER                              ";
	JVputInfo "---------------------------------------------------------------";
}

proc JVsave {} {
	global AdminConfig; 
	puts "";
	puts "---------------------------------------------------------------";
	puts "              Save                                             ";
	puts "---------------------------------------------------------------";
	puts "";
	$AdminConfig save;
}

#####################
# OLD
####################

