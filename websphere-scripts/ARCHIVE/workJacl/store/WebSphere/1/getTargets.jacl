# Author: Barry Searle
#
# (C) Copyright IBM Corp. 2004,2005 - All Rights Reserved.
# DISCLAIMER:
# The following source code is sample code created by IBM Corporation.
# This sample code is not part of any standard IBM product and is provided
# to you solely for the purpose of assisting you in the development of your
# applications. The code is provided 'AS IS', without warranty or condition
# of any kind. IBM shall not be liable for any damages arising out of your
# use of the sample code, even if IBM has been advised of the possibility of
# such damages.
#
# Change History:
# 1.2 (14jan2005) fixed multiple EARs, return testURLs (not list of testURLs)
# 1.1 (17nov2004) initial shipped version
#


proc PreValidateTargetsFile { appName depType distDir  } {
	set ext ".targets"
	set targetFileName $distDir/$appName$depType$ext
	if { [file isfile $targetFileName]==0 } {
		set msg "PreValidateTargetsFile: ERROR: is not a file, targetFileName=$targetFileName"
		fail $msg
	}
	if { [file exists $targetFileName]==0 } {
		set msg "PreValidateTargetsFile: ERROR: does not exist, targetFileName=$targetFileName"
		fail $msg
	}
	if { [file readable $targetFileName]==0 } {
		set msg "PreValidateTargetsFile: ERROR: cannot read targetFileName=$targetFileName"
		fail $msg
	}
}

proc readTargetsFile { appName depType distDir} {
	source Definitions.jacl
	PreValidateTargetsFile $appName $depType $distDir
	set ext ".targets"
	set targetFile $distDir/$appName$depType$ext
	log $MAJOR_ "readTargetsFile: targetFile=$targetFile"

	set temp [catch {open $targetFile r} fileId]
	if { $temp == 0 } {
		set more true
	} else { 
		set more false
		set msg "ERROR: readTargetsFile: attempting to read targetFile=$targetFile"
		fail $msg
		exit -1
	}
	
	set nodeServerPairs	[list]
	set clusters		[list]
	set testURLs 		[list]
	set testResponses	[list]
	while {$more} {
		if { [eof $fileId] } {
			set more false
		}
		set line [gets $fileId]			
		set line [string trim $line]
		log $DEBUG_ "readTargetsFile: line=$line"
		if {[string first "#" $line]==0}  {
			log $DEBUG_  "readTargetsFile: COMMENT=$line"
			set line ""
		}
		
		set equals [string first "=" $line]
		set comma 0
		if {$equals>0} {
			set comma [string first "," $line]
		}
		#log $DEBUG_ "readTargetsFile: equals=$equals comma=$comma"
		if {$equals>0} {
			set key [string range $line 0 [expr $equals-1]]
			set key [string trim $key]
			set param1 ""
			set param2 ""
			if {$comma>0} {
				set param1 [string range $line [expr $equals+1] [expr $comma-1]]
				set param1 [string trim $param1]
				set param2 [string range $line [expr $comma+1] end]
				set param2 [string trim $param2]
			} else {
				set param1 [string range $line [expr $equals+1] end]
				set param1 [string trim $param1]
			}
			#log $DEBUG_  "readTargetsFile: key=$key param1=$param1 param2=$param2"

			if {$key == "nodeserver"} {
				if {$param1==""} {
					set msg = "readTargetsFile: ERROR: (MISSING ','):  $line"
					fail
				}
				log $INFO_ "readTargetsFile: node=$param1 server=$param2"
				set nodeServerPair [list $param1 $param2]
				lappend nodeServerPairs $nodeServerPair
			} elseif {$key=="cluster"} {
				log $INFO_ "readTargetsFile: cluster=$param1"
				lappend clusters $param1
			} elseif {$key=="testURL"} {
				log $VERBOSE_ "readTargetsFile: testURL=$param1"
				set testURL $param1
				lappend testURLs $testURL
			} elseif {$key=="testResponse"} {
				if {$param2!=""} {
					set cm ","
					set param1 $param1$cm$param2
				}
				log $VERBOSE_ "readTargetsFile: testResponse=$param1"
				lappend testResponses $param1
			} else {
				set msg "readTargetsFile: ERROR: unknown key=$key"
				fail $msg
			}
			#log $DEBUG_  "readTargetsFile:  key=$key param1=$param1 param2=$param2"

		} else {
			if {$line!=""} {
				set msg "ERROR: ReadTargetsFile: (MISSING '='):  $line"
				fail $msg
				exit -1
			}
		}
	}
	set temp [catch {close $fileId}]
	log $DEBUG_  "readTargetsFile: app nodeServerPairs=$nodeServerPairs"
	log $DEBUG_  "readTargetsFile: app clusters=$clusters"
	log $DEBUG_  "readTargetsFile: app testURLs=$testURLs"
	log $DEBUG_  "readTargetsFile: app testResponses=$testResponses"

	set targets [list $nodeServerPairs $clusters $testURLs $testResponses]
	log $VERBOSE_ "readTargetsFile: returning $targets"
	return $targets
}

