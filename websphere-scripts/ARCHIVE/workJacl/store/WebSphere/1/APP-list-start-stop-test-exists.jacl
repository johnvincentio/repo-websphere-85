# Author: Barry Searle
#
# (C) Copyright IBM Corp. 2004,2005 - All Rights Reserved.
# DISCLAIMER:
# The following source code is sample code created by IBM Corporation.
# This sample code is not part of any standard IBM product and is provided
# to you solely for the purpose of assisting you in the development of your
# applications. The code is provided 'AS IS', without warranty or condition
# of any kind. IBM shall not be liable for any damages arising out of your
# use of the sample code, even if IBM has been advised of the possibility of
# such damages.
#
# Change History:
# 1.3 (22apr2005) additional socket exception checks, fixed GET HTTP/1.1
# 1.2 (14jan2005) fixed startApp returns if exception, does not checkIfRunning
# 1.2 (14jan2005) fixed testApp index into testURLs and testResponses
# 1.1 (17nov2004) initial shipped version
#

proc PreValidateApplicationTargetsAndSettings { appNames depType distDir } {
	source Definitions.jacl
	foreach appName $appNames {
		PreValidateTargetsFile	$appName $depType $distDir  
		PreValidateSettingsFile $appName $depType $distDir 
	}
	log $INFO_ "PreValidateApplicationTargetsAndSettingsFilesExist DONE. appNames=$appNames depType=$depType"
}

proc PreValidateApplicationsExist { appNames } {
	source Definitions.jacl
	foreach appName $appNames {
		set appExists [checkIfAppExists $appName]
		if { $appExists } {
			log $INFO_ "PreValidateApplicationsExist OK appName=$appName"
		} else {
			fail "PreValidateApplicationsPresent: MISSING application=$appName"
		}
	}
}

proc PreValidateApplicationsAbsent { appNames } {
	source Definitions.jacl
	foreach appName $appNames {
		set appExists [checkIfAppExists $appName]
		if { $appExists } {
			fail "PreValidateApplicationsAbsent: EXISTING application=$appName"
		} else {
			log $INFO_ "PreValidateApplicationsAbsent: OK appName=$appName"
		}
	}
}

proc validateApplication { appName } {
	source Definitions.jacl
	log $INFO_ "validateApplication $appName ..."
	$AdminConfig validate [$AdminConfig  getid  /Deployment:$appName/]
}

proc listApplications { } {
	source Definitions.jacl
	log $INFO_ "ListApplications:"
	set apps [$AdminApp list]
	foreach app $apps {
		log $INFO_ "  $app"
	}
	log $VERBOSE_ "ListApplications: DONE."
}

proc checkIfAppExists { appName } {
	source Definitions.jacl
	set appExists true
	set application [$AdminConfig  getid  /Deployment:$appName/]
	log $DEBUG_ "checkIfAppExists appName=$appName installedAppID=$application"
	if { [llength $application] ==0 } {
		set appExists false
		log $VERBOSE_ "checkIfAppExists: FALSE for appName=$appName"
	} else {
		log $VERBOSE_ "checkIfAppExists: TRUE for appName=$appName"
	}
	return $appExists
}

proc StartApplication { appName nodeName serverName } {
	source Definitions.jacl
	log $INFO_ "StartApplication: appName=$appName nodeName=$nodeName serverName=$serverName ..."
	set appMgrID [$AdminControl queryNames type=ApplicationManager,node=$nodeName,process=$serverName,*]
	set length [llength $appMgrID]
	log $DEBUG_ "StartApplication: appMgrID.length=$length appMgrID=$appMgrID"
	if { $length >= 1 } {
		#set  deployments [$AdminConfig list Deployment]
		#log $DEBUG_ "StartApplication: deployments=$deployments"
		#set  applications [$AdminControl queryNames type=Application,*]
		#log $DEBUG_ "StartApplication: applications=$applications"

		log $VERBOSE_ "StartApplication: starting $appName  ..."
		set temp [catch {set  started [$AdminControl invoke $appMgrID startApplication $appName]}]
		if { $temp > 0 } {
			log $WARNING_ "StartApplication: Exception trying to start $appName $nodeName $serverName"
			return
		} else {
			if { [llength $started] > 0 } {
				log $INFO_ $started
			}
		}
	} else {
		log $ERROR_ "StartApplication: appMgr ERROR, NOT ACCESSABLE, cannot start $appName"
	}
	checkApplicationRunning $nodeName $serverName $appName
	log $VERBOSE_ "StartApplication: DONE."
}

proc StopApplication { appName nodeName serverName } {
	source Definitions.jacl
	log $INFO_ "StopApplication: appName=$appName nodeName=$nodeName serverName=$serverName ..."
	set  appMgrID [$AdminControl queryNames type=ApplicationManager,node=$nodeName,process=$serverName,*]
	set  length [llength $appMgrID]
	log $VERBOSE_ "StopApplication: appMgrID.length=$length appMgrID=$appMgrID"
	if { $length >= 1} {
		#set  appMgrID [lindex $appMgrID 0]
		log $VERBOSE_ "StopApplication: stopping $appName  ..."
		set stopped ""
		set temp [catch {set  stopped [$AdminControl invoke $appMgrID stopApplication $appName]}]
		if { $temp > 0 } {
			log $WARNING_ "StopApplication: Exception trying to stop $appName $nodeName $serverName"
		} else {
			if { [llength $stopped] > 0 } {
				log $VERBOSE_ $stopped
			}
		}
	} else {
		log $ERROR_ "StopApplication: appMgr ERROR, NOT ACCESSABLE, cannot stop $appName"
	}
	log $VERBOSE_ "StopApplication: DONE."
}

proc testApplication { testURLs testResponses } {
	source Definitions.jacl
	global WasTclVers
	log $INFO_ ""
	log $MAJOR_ "testApplication: URLs and Responses begin ..."
	log $DEBUG_ "testApplication: testResponses=$testResponses"
	log $DEBUG_ "testApplication: testURLs=$testURLs"
	set indx 0
	set length [llength $testURLs]
	while { $indx < $length } {
		set url [lindex $testURLs $indx]
		set response [lindex $testResponses $indx]
		log $VERBOSE_ "testApplication: testURL=$url  testResponse=$response"
		incr indx
		set lines [ readWebPage $url]
		if { [llength $lines] == 0 } {
			if { $WasTclVers > 5 } {
				log $ERROR_ "testApplication: FAILED CONNECT:  url=$url  expectedResponse=$response"
			} else {
				log $WARNING_ "testApplication: (v51 Tcl/Jacl) FAILED CONNECT: url=$url  expectedResponse=$response"
			}
			continue
		}
		set found false
		foreach line $lines {
			if {[string first $response $line]>=0} {
				set found true
			}
		}
		if { $found } {
			log $INFO_ "testApplication: PASSED: url=$url contained=$response"
		} else {
			log $ERROR_ "testApplication: FAILED RESPONSE: url=$url expectedResponse=$response"
		}
	}
}

proc readWebPage { webpageURL } {
	source Definitions.jacl
	global WasTclVers
	set webpageURL [string trim $webpageURL]
	log $VERBOSE_ "readWebpage webpageURL=$webpageURL"
	set slash [string first "http://" $webpageURL]
	if { $slash < 0 } {
		log $ERROR_ "missing 'http://' from webpageURL=$webpageURL"
		return
	}
	set webpageURL [string range $webpageURL 7 end]

	set slash [string first "/" $webpageURL]
	if { $slash < 0 } {
		log $ERROR_ "missing server'/'path' from webpageURL=$webpageURL"
		return
	}
	set port ""
	set server ""
	set path ""
	if {![regexp -nocase {^(http://)?([^:/]+)(:([0-9]+))?(/.*)} \
			$webpageURL x protocol server y port path]} {
		log $ERROR_ "readWebPage: invalid webpageURL=$webpageURL"
		return
	}
	set server [string trim $server]
	if {$port==""} {
		set port 80
	}
	#set path [string range $webpageURL [expr $slash] end]
	#set server [string range $webpageURL 0 [expr $slash-1]]
	#set colon [string first ":" $server]
	#if { $colon > 0 } {
	#	set port    [string range $server [expr $colon+1] end]
	#	set server  [string range $server 0 [expr $colon-1]]
	#}

	log $VERBOSE_ "readWebPage: server=$server port=$port contextPath=$path"
	set e [catch {
		set sock [socket $server $port]
	}]
	if { $e != 0 } {
		log $ERROR_ "readWebPage: set socket error=$e for server=$server port=$port"
		if { $WasTclVers <= 0 } {
			log $WARNING_ "testApplication: TclJava.jar and/or Jacl.jar too old for web/socket reads ?"
			log $WARNING_ "testApplication: #### (copy TCLJAVA.jar plus JACL.jar from WAS60-lib into WAS51-lib) ####"
			set WasTclVers 5
		}
		return
	} else {
		set WasTclVers 6
	}
	log $DEBUG_ "readWebPage: completed set socket server=$server port=$port"

	set e [catch {
		log $VERBOSE_ "readWebPage: write webpage request to socket server=$server port=$port (path=$path)"
		puts $sock "GET $path HTTP/1.1"
		puts $sock "Host: $server"
		puts $sock "Accept: */*"
		puts $sock "User-Agent: JACL readWebPage"
		puts $sock ""
		log $DEBUG_ "readWebPage: completed write request to socket ' '"
		flush $sock
		log $DEBUG_ "readWebPage: completed flush socket "
	}]
	if { $e != 0 } {
		log $ERROR_ "readWebPage: puts socket write error=$e  (for server=$server port=$port)"
		return
	}
	log $INFO_ "readWebPage: completed request writes to socket, will read response"

	set lines [list]
	set lineCount 0
	set more true
	if { [eof $sock] } {
		set more false
	}
	while {$more} {
		incr lineCount 1
		if { $lineCount > 100 } {
			set more false
		}
		if { [eof $sock] } {
			set more false
		} else {
			set line [gets $sock]
			set line [string trim $line]
			log $DEBUG_ "readWebPage line=$line"
			if { ($line=="Connection: Close") || 
			     ($line=="HTTP/1.1 505 HTTP Version Not Supported") } {
				log $ERROR_ "readWebPage: Connection Closed, error=$line  (for server=$server port=$port)"
				set EOF true
				set more false
			}
			lappend lines $line
			set line [string toupper $line]
			if {$line == "</BODY>"} {
				set more false
			}
		}
	}
	catch { [ close $sock]}
	return $lines
}


proc StopApplicationOnNodesAndServers { appName uniqueNodesContainedServers} {
	source Definitions.jacl
	log $INFO_ "StopApplicationOnNodesAndServers: appName=$appName ..."
	if { [llength $uniqueNodesContainedServers]==0 } {
		fail $ERROR_ "StopApplicationOnNodesAndServers : No nodes/servers/clusters specified"
	} 
	foreach nodeContainedServers $uniqueNodesContainedServers {
	#set nodeContainedServers [lindex $uniqueNodesContainedServers 0]
		set nodeName		[lindex $nodeContainedServers 0]
		set containedServers	[lindex $nodeContainedServers 1]
		foreach serverName	$containedServers {
		#set serverName [lindex $containedServers 0]
			StopApplication $appName $nodeName $serverName
		}
	}
	highlight $MAJOR_ "StopApplicationOnNodesAndServers  DONE."
}

proc StartApplicationOnNodesAndServers { appName uniqueNodesContainedServers} {
	source Definitions.jacl
	log $INFO_ ""
	log $MAJOR_ "StartApplicationOnNodesAndServers: appName=$appName ..."
	if { [llength $uniqueNodesContainedServers]==0 } {
		fail $ERROR_ "StartApplicationOnNodesAndServers : No nodes/servers/clusters specified"
	} 
	foreach nodeContainedServers $uniqueNodesContainedServers {
	#set nodeContainedServers [lindex $uniqueNodesContainedServers 0]
		set nodeName		[lindex $nodeContainedServers 0]
		set containedServers	[lindex $nodeContainedServers 1]
		foreach serverName	$containedServers {
		#set serverName [lindex $containedServers 0]
			StartApplication $appName $nodeName $serverName
		}
	}
	highlight $MAJOR_ "StartApplicationOnNodesAndServers  DONE."
}

proc checkApplicationRunning { nodeName serverName appName } {
	source Definitions.jacl
	log $VERBOSE_ "checkApplicationRunning: $nodeName $serverName $appName"
	set appID ""
	set temp [catch {set appID [$AdminControl completeObjectName type=Application,node=$nodeName,Server=$serverName,name=$appName,*]}]
	if { $temp > 0 } {
                log $WARNING_ "checkApplicationRunning: Exception trying to getID for $appName $nodeName $serverName"
	}
	set  length [llength $appID]
	log $DEBUG_ "checkApplicationRunning: appID.length=$length"

	set retries 0
	while { ($retries < 20) && ($length == 0) } {
		incr retries
		log $INFO_ "checkApplicationRunning: not yet started, $appName $nodeName $serverName, retries=$retries ..."
		set temp [catch {
			sleepDelay 10
			set appID [$AdminControl completeObjectName type=Application,node=$nodeName,Server=$serverName,name=$appName,*]
			if { [llength $appID] == 0 } {
				set appExists [checkIfAppExists $appName]
				if { $appExists } {
				} else {
					log $ERROR_ "checkApplicationRunning: $appName is NOT INSTALLED."
					return
				}
			}
		}]
		if { $temp > 0 } {
                	log $WARNING_ "checkApplicationRunning: Exception trying to getID for $appName $nodeName $serverName"
		}
		set  length [llength $appID]
		log $DEBUG_ "checkApplicationRunning: temp=$temp appID=$appID ..."
	}
	if { $retries > 0 } {
                log $INFO_ "checkApplicationRunning: $nodeName $serverName $appName had slow start, status retries=$retries"
	}

	if { $length > 0 } {
		log $INFO_ "checkApplicationRunning: $appName is STARTED."
	} else {
		log $ERROR_ "checkApplicationRunning: $appName $nodeName $serverName DID NOT START."
	}
}
