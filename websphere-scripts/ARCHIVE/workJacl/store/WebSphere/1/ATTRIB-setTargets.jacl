# Author: Barry Searle
#
# (C) Copyright IBM Corp. 2004,2005 - All Rights Reserved.
# DISCLAIMER:
# The following source code is sample code created by IBM Corporation.
# This sample code is not part of any standard IBM product and is provided
# to you solely for the purpose of assisting you in the development of your
# applications. The code is provided 'AS IS', without warranty or condition
# of any kind. IBM shall not be liable for any damages arising out of your
# use of the sample code, even if IBM has been advised of the possibility of
# such damages.
#
# Change History:
# 1.3 (22apr2005) API:setTargets+setModuleMappings: added 'appFile' parameter, 
# 1.3 (22apr2005) major restructure, uses WAS-5.0 compatible "AdminApp taskInfo"
# 1.1 (17nov2004) initial shipped version
#


proc setTargets { appName clusters appNodeServerPairs appFile} {
	setModuleMappings $appName $clusters $appNodeServerPairs $appFile
}

proc setModuleMappings { appName clusters appNodeServerPairs appFile} {
	global wsadminCell
	source Definitions.jacl
	set cellName $wsadminCell
	set targets ""
	foreach cluster $clusters {
		set clusterName $cluster
		set t "+WebSphere:cell=$cellName,cluster=$clusterName"
		set targets $targets$t
		log $DEBUG_ "setModuleMappings: cluster targets=$targets"
	}
	foreach nodeServerPair $appNodeServerPairs {
		set nodeName [lindex $nodeServerPair 0]
		set serverName [lindex $nodeServerPair 1]
		set t "+WebSphere:cell=$cellName,node=$nodeName,server=$serverName"
		set targets $targets$t
		log $DEBUG_ "setModuleMappings: server targets=$targets"
	}
	set targets [string range $targets 1 end]
	log $INFO_ "setModuleMappings: targets=$targets"

	#### v5.0 does not support "AdminApp view", so use "AdminApp taskInfo" instead.
	log $INFO_ "setModuleMappings: EarFile Mapping query: \$AdminApp taskInfo $appFile MapModulesToServers"
	set temp [catch { set lines [$AdminApp taskInfo $appFile MapModulesToServers ] }]
	if { $temp > 0 } {
		log $ERROR_ "setModuleMappings: Exception trying to view MapModulesToServers for $appName"
		return;
	}
	log $DEBUG_ "EarFile default mapping=$lines"
	set lines [split $lines "\n"]
	set mappings [list ]
	set m1 ""
	set MODULE "MODULE: "
	set URI "URI: "

	foreach line $lines {
		#log $DEBUG_ "MapModulesToServers line=$line"
		set testMOD  [string toupper [string range $line 0 [expr [string length $MODULE]-1]]]
		set testURI  [string toupper [string range $line 0 [expr [string length $URI]-1]]]
		if { $testMOD==$MODULE } { 
			set m1 [string range $line [string length $MODULE] end]
			set m1 [string trim $m1]
			log $VERBOSE_ "MODULE=$m1"
		} elseif { $testURI==$URI } {
			set m2 [string range $line [string length $URI] end]
			set m2 [string trim $m2]
			log $VERBOSE_ "URI=$m2"
			set mapping [list $m1 $m2 $targets]
			set mapping "\"$m1\" $m2 $targets"
			log $INFO_ "setModuleMapping: mapping=$mapping"
			lappend mappings "$mapping"
			set m1 ""
		}
	}

	log $VERBOSE_ "setModuleMappings: combined mappings=$mappings"
	set options [list -MapModulesToServers $mappings]
	log $DEBUG_ "invoking: AdminApp edit $appName $options"
	set temp [catch { set response [$AdminApp edit $appName $options] }]
	if { $temp > 0 } {
		log $ERROR_ "setModuleMappings: Exception trying to AdminApp edit $appName $options"
		return;
	}
	if { [llength $response] >0 } {
		log $MAJOR_ "setModuleMappings: MapModulesToServers response=$response"
	}
	log $VERBOSE_ "setModuleMappings: DONE."
}
